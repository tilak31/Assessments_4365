# -*- coding: utf-8 -*-
"""4365_Internal_assessment_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lr7meC2BtfErfEGoU1iamhfvYmMqwVBJ
"""

# 1

def calculation():
    length = float(input('Enter length of the property [in sq.ft]: '))
    width = float (input('Enter width of the property [in sq.ft]: '))
    return length * width


def pricing():
    if Area <= 650.00:
        print('Your area is a small size property')
    elif  651.00 <= Area <= 1350.00 :
        print('Your area is Mid size property')
    elif  Area>= 1351.00:
        print('Your area is a large size property')

calculation()
pricing()

# 2
def B_M_I():
    WEIGHT = float(input('Enter your weight (in kilograms:)'))
    HEIGHT = float(input('Enter your hright (in meters:)'))
    return WEIGHT / (HEIGHT ** 2)

B_M_I()

class School:
    def __init__(self):
        self.student_records = {}

    def add_student(self, student_id, student_name, grades):
        self.student_records[student_id] = {'name': student_name, 'grades': grades}

    def update_student_grades(self, student_id, subject, grade):
        if student_id in self.student_records:
            self.student_records[student_id]['grades'][subject] = grade
        else:
            print(f"Student with ID {student_id} not found.")

    def retrieve_student_record(self, student_id):
        return self.student_records.get(student_id, "Student record not found.")

    def print_student_report(self, student_id):
        student_record = self.retrieve_student_record(student_id)
        if isinstance(student_record, dict):
            print(f"Report for {student_record['name']}:")
            for subject, grade in student_record['grades'].items():
                print(f"{subject}: {grade}")
        else:
            print(student_record)

school_system = School()

school_system.add_student('198', 'Tilak', {'SQL': 'B', 'Python': 'B', 'Tableau': 'C'})
school_system.add_student('166', 'Venkat', {'SQL': 'B', 'Python': 'A', 'Tableau': 'B'})

school_system.update_student_grades('198', 'Tableau', 'B')

print(school_system.retrieve_student_record('166'))

school_system.print_student_report('166')
school_system.print_student_report('198')

def get_user_age():
    try:
        age = int(input("Please enter your age: "))
        return age
    except ValueError:
        print("Invalid input. Please enter a valid age.")
        return get_user_age()

def recommend(age):
    if age < 13:
        print("- DOREMON")
        print("- Chin Chan")
    elif 13 <= age < 18:
        print("- Shakala Boom Boom")
        print("- Racing Movies")
    else:
        print("- Thrillers")
        print("- Horror")

def main():
    print("Welcome")
    user_age = get_user_age()
    recommend(user_age)

if __name__ == "__main__":
    main()

#5
def even_subscriber_ids(num):
    even_ids = []

    for i in range(2, 2 * num + 1, 2):
        even_ids.append(i)

    return even_ids

num = 10
even_subscriber_ids = even_subscriber_ids(num)

print('Even subsribers_id', even_subscriber_ids)

#6
def checker(user_password, correct_password):
    return user_password == correct_password

def main():
    correct_password = "12343567890"

    while True:
        user_password = input("Enter your password: ")
        if checker(user_password, correct_password):
            print("Correct Password")
            break
        else:
            print("Incorrect password. Try again.")

if __name__ == "__main__":
    main()

#7
def average_satisfaction(survey_data):
    total_score = 0
    response_count = 0

    for response in survey_data:
        total_score = total_score + response.get('satisfaction_score', 0)
        response_count += 1

    average_score = total_score / response_count if response_count else 0

    return average_score
survey_responses = [
    {'satisfaction_score': 4},
    {'satisfaction_score': 5},
    {'satisfaction_score': 3},
    {'satisfaction_score': 4},
    {'satisfaction_score': 2}
]
average_satisfaction = average_satisfaction(survey_responses)
print('average_satisfaction: ', average_satisfaction)

#8
def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def filter_comments(comments):
    good_comments = []
    spam_comments = []

    for comment in comments:
        num_vowels = count_vowels(comment)
        if num_vowels > 3:
            good_comments.append(comment)
        else:
            spam_comments.append(comment)
    return {"good": good_comments, "spam": spam_comments}


all_comments = [ (input('Enter your comments: ')) ]

categorized_comments = filter_comments(all_comments)
print("Good Comments:")
for comment in categorized_comments["good"]:
    print(comment)
print("\nSpam Comments:")
for comment in categorized_comments["spam"]:
    print(comment)

#9
import datetime

class TaskManager:
    def __init__(self):
        self.tasks = []

    def add_task(self, task, due):
        self.tasks.append({'name': task, 'due_date': due})

    def get_upcoming_tasks(self, num_days=7):
        today = datetime.date.today()
        end_date = today + datetime.timedelta(days=num_days)
        upcoming_tasks = [task for task in self.tasks if task['due_date'] <= end_date]
        return upcoming_tasks

def main():
    task_manager = TaskManager()
    task_manager.add_task("Marriage", datetime.date(2024, 5, 15))

    upcoming_tasks = task_manager.get_upcoming_tasks(num_days=7)

    if upcoming_tasks:
        print("Upcoming tasks:")
        for task in upcoming_tasks:
            print(f"{task['name']} (Due on {task['due_date']})")
    else:
        print("No upcoming tasks in the next 7 days.")

if __name__ == "__main__":
    main()

# 12
import math

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y != 0:
        return x / y
    else:
        return "Error: Division by zero"

def power(x, y):
    return x ** y

def square_root(x):
    return math.sqrt(x)
print("Scientific Calculator")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")
print("5. Power")
print("6. Square Root")
print("7. Logarithm")
print("8. Sine")
print("9. Cosine")
print("10. Tangent")

choice = int(input("Enter your choice (1-10): "))

if choice in range(1, 11):
    if choice in [6, 7]:
        num = float(input("Enter a number: "))
    else:
        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))

    if choice == 1:
        print("Result:", add(num1, num2))
    elif choice == 2:
        print("Result:", subtract(num1, num2))
    elif choice == 3:
        print("Result:", multiply(num1, num2))
    elif choice == 4:
        print("Result:", divide(num1, num2))
    elif choice == 5:
        print("Result:", power(num1, num2))
    elif choice == 6:
        print("Result:", square_root(num))
else:
    print("Invalid")