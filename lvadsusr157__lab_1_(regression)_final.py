# -*- coding: utf-8 -*-
"""LVADSUSR157_ LAB_1 (Regression)_Final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11037lOALrNqysKRjfOKvzqnt4xxzO4Sr
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score,mean_squared_error

df = pd.read_csv("/content/Fare prediction.csv")
df

df.info()

df.describe()

df.isnull().sum()

df.isna().sum()

df.shape

df.duplicated().sum()

# Plot histograms for numerical columns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.xticks(rotation=90)
    plt.ylabel('Count')
    plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# *******************************************************
Q1 = df['fare_amount'].quantile(0.25) #first quarter
Q3 = df['fare_amount'].quantile(0.75) #rest 3 quarters
iqr = Q3-Q1
lower_bound = Q1-1.5*iqr
upper_bound = Q3+1.5*iqr
df_proper= df[(df['fare_amount']>lower_bound) & (df['fare_amount']<upper_bound)]
df_proper

Q1 = df['pickup_latitude'].quantile(0.25) #first quarter
Q3 = df['pickup_latitude'].quantile(0.75) #rest 3 quarters
iqr = Q3-Q1
lower_bound = Q1-1.5*iqr
upper_bound = Q3+1.5*iqr
df_proper= df[(df['pickup_latitude']>lower_bound) & (df['pickup_latitude']<upper_bound)]
df_proper

# *******************************************************
Q1 = df['pickup_longitude'].quantile(0.25) #first quarter
Q3 = df['pickup_longitude'].quantile(0.75) #rest 3 quarters
iqr = Q3-Q1
lower_bound = Q1-1.5*iqr
upper_bound = Q3+1.5*iqr
df_proper= df[(df['pickup_longitude']>lower_bound) & (df['pickup_longitude']<upper_bound)]
df_proper

# *******************************************************
Q1 = df['dropoff_longitude'].quantile(0.25) #first quarter
Q3 = df['dropoff_longitude'].quantile(0.75) #rest 3 quarters
iqr = Q3-Q1
lower_bound = Q1-1.5*iqr
upper_bound = Q3+1.5*iqr
df_proper= df[(df['dropoff_longitude']>lower_bound) & (df['dropoff_longitude']<upper_bound)]
df_proper

X_train, X_test, y_train, y_test = train_test_split(df['pickup_longitude'],df['dropoff_longitude'],train_size=0.8,random_state=20)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

scaler = MinMaxScaler()
#scaler.fit(X)
#scaler.transform(X)
X_train =  pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]), columns=X.columns)
X_test = pd.DataFrame(scaler.transform(X_test[list(X.columns)]), columns=X.columns)

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)



