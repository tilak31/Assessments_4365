# -*- coding: utf-8 -*-
"""Logistic Regression_4365(Internal)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JJBUv_5c84byg8FVg2JUCaPCUHsk8KxR
"""

import pandas as pd
import numpy as np
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report, confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, LabelEncoder

df = pd.read_csv("/content/booking.csv")
df

df.shape

df.info()

df.describe(include='all')

df.columns

df.isnull().sum()

df.booking_status = pd.to_numeric(df.booking_status,errors='coerce')
df.info()

num_df = df.select_dtypes(include=np.number)
df2=df.iloc[:, 1:]

print(df2)

#df2['Booking_status'].replace(to_replace = 'Yes', value=1, inplace=True)
#df2['Booking_status'].replace(to_replace = 'No' , value=0, inplace= True)

df_dummies=pd.get_dummies(df2)
print(df_dummies.head())

df2.select_dtypes(include=np.number).corr()['booking_status']
df_co=df_dummies.corr()['booking_status']

df_booking_status = df_dummies['booking_status']
df_booking_status
#df_booking_status.dropna(axis =0, inplace=True)
#df_dummies.dropna(axis =0, inplace=True)
df_dummies2=df_dummies.copy()

df_dummies2

#Normalize data
y=df.booking_status
enc = LabelEncoder()
y_enc = enc.fit_transform(y)
y_enc = y_enc.reshape(-1,1)

# Converting entire data between the range of 0 to 1
from sklearn.preprocessing import MinMaxScaler
features = df_dummies2.columns.values
scaler = MinMaxScaler(feature_range = (0,1))
scaler.fit(df_dummies2)
X=pd.DataFrame(scaler.transform(df_dummies2))
X.columns = features
X

#dropping null values
num_df.dropna(axis= 1, inplace=True)
num_df

X_train, X_test, y_train, y_test = train_test_split(num_df,df_booking_status,train_size=0.7,random_state=20)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

model = LogisticRegression()

model.fit(X_train, y_train)











